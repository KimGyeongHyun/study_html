module.css
    css 파일을 만들어 import 하게 되면
    각 컴포넌트에 대해서만 적용되는 것이 아니라 모든 컴포넌트에 css 가 적용된다
    css 를 컴포넌트 단위로 적용하고 싶으면 module.css 형식을 사용하면 된다

    컴포넌트에서 module.css 를 객체로 받는다 (styles 로 받는다고 가정)
    태그에 클래스를 부여하기 위해선 className={styles.클래스이름} 을 적는다

    css 에선 태그를 추적해 자동으로 적용해주지만
    module.css 에서 css 를 태그 이름으로 적용을 해도 자동으로 적용해 주지 않는다
    className={styles.클래스이름} 속성을 꼭 넣어야 한다

    이런 특징 때문에 css / module.css 는 다른 방향성으로 클래스를 작성해야 한다
    이에 따른 장단점이 존재한다

    css 장점

        태그와 클래스 단위로 클래스를 작성하기에 용이하다
        section>ul li img {...}

        하위 태그로 들어가면서 스타일링을 적용할 수 있기 때문에 직관적이다
        section .header .logo-box .logo {...}
    
    css 단점
        컴포넌트 단위로 스타일링이 안 되기 때문에
        클래스 이름이 프레임워크 클래스 이름과 꼬일 수 있다

    module.css 장점

        직접 클래스를 부여해야 css 가 적용되기 때문에 각각의 태그에 스타일링을 하기에 좋다
        <h1 className={styles.h1Deco}

    module.css 단점

        직접 클래스를 부여해야 하므로 같은 스타일링을 주려면 하나씩 적어야 한다
        (컴포넌트 구성 단에서 반복문으로 스타일링을 줄 수 있다)


js 분해 할당
    js 변수 선언부에서 배열이나 객체 내부의 값을 바로 받아올 수 있다
    const [x, y] = 리스트;
    const {x, y} = 객체;

    객체에서 값을 가져올 때 객체의 key 값을 선언하면 해당 값을 그대로 가져온다

    ex)
    const {day} = useParams();
    useParams() 함수는 url 에서 key, value 쌍을 객체 형태로 가져온다
    useParams() 리턴 객체가 {id: 2, day: 1} 라고 할 때
    객체 내부 day 의 value(1) 값을 const {day} 의 day 값에 복사한다

    var x, y;
    [x, y] = ~ ;
    도 가능

    {x, y, ...rest} 로 선언된 경우
    앞의 두 요소는 x, y 에 할당되고
    나머지는 rest 에 할당된다

    함수 파라미터 선언부에 사용하는 경우
    해당 객체가 해체되어 바로 변수로 사용 가능하다
    function Abcd({x, y}) {...}