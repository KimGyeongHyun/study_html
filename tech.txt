lko-html-form -> 자동완성으로 사용하고 있음
flexbox froggy -> flex 연습
fluke -> css 연습

모든 상하정렬은 flex 가 편함
flex 요소를 상하 정렬하고 싶으면
flex-direction: column 속성 사용하기

flex 내부 요소에 flex 속성을 주면 해당 수치만큼
가로 비율이 자동으로 맞추어짐
내부 속성을 모두 일정하게 유지할 때 간단하게 작성하기 좋음
flex: 1

글자 넘칠때 사용할 수 있는 속성
자동 줄 바꿈 제거
white-space: nowrap;
넘친 부분을 안 보이게 함
overflow: hidden;
넘쳤다면 뒤에 ... 붙임 (말줄임표)
text-overflow: ellipsis;

가로 값이 너무 커져 가로 스크롤이 생길때 이를 없애고 싶다면
max-width: 100%; 선언하기
직접 계산하는 것도 가능
width: calc(100% - 200px);

transform: translate ~ ;
transition: 1s;
처럼 애니메이션 초기화 없이 간단하게 애니메이션 설정 가능

텍스트 내부 글자 조금만 서식 -> span 태그 사용

js

보통 css 에서 class 쓰고 js 에서 id 사용
js 에서 요소를 부를 때 id 이름으로 바로 부를 수 있음

function 사용시 parameter 전달하기 위해선 html 에서 함수를 부르는 것이 좋음

querySelector(태그) 의 경우 제일 위에 있는 태그부터 부른다
querySelector(.클래스명) 의 경우도 제일 위에 있는 클래스 포함 요소를 부른다

클래스를 잡고 css 를 적용할 수 있지만 
이는 요소에 직접 style 속성을 부여하는 것이므로
클래스에 css 속성을 부여한다고 볼 수 없음
제일 위에 있는 요소만 선택되므로 
클래스의 css 속성이 바뀌지 않고 해당 요소의 style 속성만 바뀜

클래스 속성을 직접 건드릴 수 없지만 요소에 추가, 제거는 가능
class 넣다 빼는 방식은 토글에 이점이 있음
다른 요소에도 적용하려면 
."클래스 이름" "적용할 요소" { ~ }
의 형식으로 새로 만들면 된다
클래스 토글 방식을 사용할 경우 어떤 요소에 클래스를 넣을지 먼저 생각하고
해당 요소를 기준으로 자식 관계에 따라 클래스를 따로 구성한다

박스 사이즈를 테두리를 포함하여 적용하기
box-sizing: border-box

그라데이션 만들어주는 사이트 적극 활용하기

jq

id 는 클래스와 다르게 태그를 여러개 못 가져옴
id 는 한 개만 잡아야 하는 것이 원칙

함수를 적용할 때 따로 만드는 것이 미관상 좋지만
파라미터 안에 선언하면 $(this) 의 형태를 사용할 수 있음
클릭 이벤트에서 유용하게 사용

$(클래스).css()
의 경우 해당 클래스를 가지는 모든 요소가 선택되며
클래스 css 속성이 바뀌는 것이 아니라 선택된 요소들에게 모두 스타일 속성이 직접 부여된다
기존 js 에서는 속성을 요소 하나씩만 넣을 수 있지만 jq 는 한꺼번에 넣을 수 있다
위의 원리에 따라 클래스 선택자를 잡아 클래스 속성을 직접 변경하듯이 사용하면
요소에 클래스가 추가, 제거될 때 의도치 않은 동작을 할 수 있다

.css() 는 여러번 호출 가능
$('#box').prepend('B').css('background-color','yellow').css('border','3px solid red');

리스트 안의 요소를 잡고 리스트에 append 시킨다면
해당 요소는 없어지고 append 된 자리에 재배치된다

stop() 은 현재 진행되고 있는 애니메이션을 멈춤
토글 애니메이션에서 유용하게 사용할 수 있음
아래 코드는 여러번 클릭해도 애니메이션이 중첩 되지 않음
$('.pinkbox').stop().slideToggle();     // 종료시킨 후 애니메이션
07_06/js/slide.js 참고

$ 로 선택한 선택자끼리는 == 연산 불가

next(), prev() 요소가 없다는 것을 확인하기 위해선 
if (!$().next().html()) 와 같이 사용하기

next, prev, eq 등 사용할 때 선택자 잘 봐야 함
06_29_jq_ani_list_select\js\playlist.js

end()
이전 요소를 가져옴
아래 코드는 next 전의 원래 요소로 돌아가게끔 함
$().next().addClass('a').end().removeClass('a')

setInterval, setTimeout 의 경우
대기하는 개념이 아니기 때문에
setTimeout 을 반복문에 넣어 사용하면
Timeout 시간동안 대기하는게 아니라
반복문이 돈 만큼 한꺼번에 setTimeout 이 실행된다
따라서 일정 시간만큼 반복적으로 일을 수행하려면
반복문대신 setInterval 을 사용해야 한다

특정 횟수만큼만 돌아야 할 때 
setInterval 내부 메소드 파라미터에서 리턴하면
interval 이 중단된다